from kivy.app import App
from kivy.uix.tabbedpanel import TabbedPanel, TabbedPanelItem
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.metrics import dp
import math

class EnergyTabbedPanel(TabbedPanel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.do_default_tab = False
        
        # Create and add tabs
        self.add_widget(self.create_solar_tab())
        self.add_widget(self.create_wind_tab())
    
    def create_solar_tab(self):
        # Create tab container
        tab = TabbedPanelItem(text='Solar Calculator')
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Input fields
        content.add_widget(Label(text="Solar Panel Area (m²):", size_hint_y=None, height=dp(30)))
        self.solar_area = TextInput(multiline=False)
        content.add_widget(self.solar_area)
        
        content.add_widget(Label(text="Daily Sunlight Hours:", size_hint_y=None, height=dp(30)))
        self.sunlight_hours = TextInput(multiline=False)
        content.add_widget(self.sunlight_hours)
        
        # Calculate button
        calc_btn = Button(text="Calculate Solar Power", size_hint_y=None, height=dp(50))
        calc_btn.bind(on_press=self.calculate_solar)
        content.add_widget(calc_btn)
        
        # Result display
        self.solar_result = Label(text="", color=(0, 0, 1, 1))
        content.add_widget(self.solar_result)
        
        tab.add_widget(content)
        return tab
    
    def create_wind_tab(self):
        # Create tab container
        tab = TabbedPanelItem(text='Wind Calculator')
        content = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # Input fields
        content.add_widget(Label(text="Turbine Blade Radius (m):", size_hint_y=None, height=dp(30)))
        self.blade_radius = TextInput(multiline=False)
        content.add_widget(self.blade_radius)
        
        content.add_widget(Label(text="Wind Speed (m/s):", size_hint_y=None, height=dp(30)))
        self.wind_speed = TextInput(multiline=False)
        content.add_widget(self.wind_speed)
        
        content.add_widget(Label(text="Operating Hours:", size_hint_y=None, height=dp(30)))
        self.wind_hours = TextInput(multiline=False)
        content.add_widget(self.wind_hours)
        
        # Calculate button
        calc_btn = Button(text="Calculate Wind Power", size_hint_y=None, height=dp(50))
        calc_btn.bind(on_press=self.calculate_wind)
        content.add_widget(calc_btn)
        
        # Result display
        self.wind_result = Label(text="", color=(0, 0.5, 0, 1))
        content.add_widget(self.wind_result)
        
        tab.add_widget(content)
        return tab
    
    def calculate_solar(self, instance):
        SOLAR_EFFICIENCY = 0.20
        SOLAR_INSOLATION = 5  # kWh/m²/day
        
        try:
            area = float(self.solar_area.text)
            hours = float(self.sunlight_hours.text)
            power = area * SOLAR_INSOLATION * SOLAR_EFFICIENCY * hours
            self.solar_result.text = f"Solar Power Generated: {power:.2f} kWh"
            self.solar_result.color = (0, 0, 1, 1)  # Blue
        except ValueError:
            self.solar_result.text = "Invalid input! Please enter numbers."
            self.solar_result.color = (1, 0, 0, 1)  # Red
    
    def calculate_wind(self, instance):
        AIR_DENSITY = 1.225  # kg/m³
        WIND_EFFICIENCY = 0.40
        
        try:
            radius = float(self.blade_radius.text)
            speed = float(self.wind_speed.text)
            hours = float(self.wind_hours.text)
            
            swept_area = math.pi * (radius ** 2)
            power = 0.5 * AIR_DENSITY * swept_area * (speed ** 3) * WIND_EFFICIENCY * hours
            self.wind_result.text = f"Wind Power Generated: {power:.2f} kWh"
            self.wind_result.color = (0, 0.5, 0, 1)  # Green
        except ValueError:
            self.wind_result.text = "Invalid input! Please enter numbers."
            self.wind_result.color = (1, 0, 0, 1)  # Red

class EnergyCalculatorApp(App):
    def build(self):
        return EnergyTabbedPanel()

if __name__ == '__main__':
    EnergyCalculatorApp().run()
